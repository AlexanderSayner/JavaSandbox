# ===============================
# = OAuth
# ===============================
security.oauth2.client.clientId=360819882736-dlg69j4tjofta7umdicm5maek6ga9qki.apps.googleusercontent.com
security.oauth2.client.clientSecret=eJzwiXvBqbkQFSFWcLbGrZT5
security.oauth2.client.accessTokenUri=https://www.googleapis.com/oauth2/v4/token
security.oauth2.client.userAuthorizationUri=https://accounts.google.com/o/oauth2/v2/auth
security.oauth2.client.clientAuthenticationScheme=form
security.oauth2.client.scope=openid,email,profile
security.oauth2.resource.userInfoUri=https://www.googleapis.com/oauth2/v3/userinfo
security.oauth2.resource.preferTokenInfo=true

# ===============================
# = CORE PROPERTIES
# ===============================
# Enable debug logs
debug=false

# ===============================
# = SERVER SERVLET SET UP
# ===============================
server.servlet.session.timeout=1m

# ===============================
# = Logback
# ===============================
# Log levels severity mapping
logging.level.guru.springframework.controllers=ERROR
logging.level.org.hibernate=ERROR
# Log file name
logging.file=logs/spring-boot-logging.log
# For hibernate logs (INFO for me)
logging.level.org.hibernate.stat=INFO

# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "trading_network"
# JDBC URL of the database
spring.datasource.url=jdbc:postgresql://localhost:5432/trading_network  

# Username and password
spring.datasource.username=postgrearchon
spring.datasource.password=secret

# Keep the connection alive if idle for a long time (needed in production)
# test connections while they are not used (testOnBorrow is the opposite)
spring.datasource.testWhileIdle = true  
# Validating a connection means to run a very basic query on the database
spring.datasource.validationQuery = SELECT 1


# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql=true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
# DDL mode. This is actually a shortcut for the "hibernate.hbm2ddl.auto" property. Defaults to "create-drop" when using an embedded database and no schema manager was detected. Otherwise, defaults to "none"
# "none" because of hibernate session factory. Impossible to set update
spring.jpa.hibernate.ddl-auto = create

# Additional native properties to set on the JPA provider:
# for storing large objects
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Second level hibernate cache enable

spring.jpa.properties.hibernate.cache.use_second_level_cache=true
spring.jpa.properties.hibernate.cache.use_query_cache=true
#required - enable selective caching mode - only entities using @Cacheable annotation will use L2 cache. mode: ENABLE_SELECTIVE
spring.jpa.properties.javax.persistence.sharedCache.mode=ENABLE_SELECTIVE
#required - classpath to cache region factory.
#spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory
#for EhCache 3
spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.jcache.JCacheRegionFactory

# Monitoring
spring.jpa.properties.hibernate.generate_statistics=true

# ===============================
# = Flyway
# ===============================
flyway.enabled=true
spring.flyway.schemas=firstTestSchema
#a setup in which migrations from previous scripts were removed
spring.flyway.ignore-missing-migrations=true
